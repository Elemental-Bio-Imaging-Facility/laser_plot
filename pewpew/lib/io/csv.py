import numpy as np
import os

from pewpew import __version__
from pewpew.lib.exceptions import (
    PewPewCalibrationError,
    PewPewConfigError,
    PewPewDataError,
    PewPewFileError,
)
from pewpew.lib.formatter import formatIsotope
from pewpew.lib.laser import LaserData

from typing import Any, Dict


def load(
    path: str,
    isotope: str = "None",
    config: dict = None,
    calibration: dict = None,
    read_config: bool = True,
    read_calibration: bool = True,
) -> LaserData:
    """Imports the given CSV file, returning a LaserData object.

    Each row of the CSV is read as a line of laser data.
    An optional # commented header (see exportCsv) containing
    configuration data may also be read.

    Args:
        path: Path to the CSV file
        isotope: Name of the isotope
        config: Laser configuration to apply
        calibration: Calibration to apply
        read_config: If True, attempts to read config from header data

    Returns:
        The LaserData object.

    Raises:
        PewPewFileError: Malformed file.
        PewPewConfigError: Invalid config.
        PewPewDataError: Invalild data.

    """

    def line_to_dict(line: str, delim: str, sep: str) -> Dict[str, Any]:
        d: Dict[str, Any] = {}
        for token in line.split(delim):
            k, v = token.split(sep)
            try:
                d[k] = float(v)
            except ValueError:
                d[k] = v
                pass
        return d

    with open(path, "r") as fp:
        line = fp.readline().lstrip("#").strip()
        if line.startswith("Pew Pew "):  # CSV generated by pewpew
            # Version
            version = line[8:]
            if version < "0.3.5":
                raise PewPewFileError(f"Unsupported CSV version '{version}'.")
            # Isotope
            if "=" not in line:
                raise PewPewFileError(f"Malformed isotope line '{line}'.")
            _, isotope = fp.readline().lstrip("#").strip().split("=")
            # Config
            if read_config:
                if config is None:
                    config = dict(LaserData.DEFAULT_CONFIG)
                try:
                    config.update(line_to_dict(line, ";", "="))
                except (KeyError, ValueError):
                    raise PewPewConfigError(f"Malformed config line '{line}'")
            if read_calibration:
                if calibration is None:
                    calibration = {isotope: dict(LaserData.DEFAULT_CALIBRATION)}
                try:
                    calibration[isotope].update(line_to_dict(line, ";", "="))
                except (KeyError, ValueError):
                    raise PewPewCalibrationError(f"Malformed calibration line '{line}'")

        try:
            data = np.genfromtxt(fp, delimiter=",", dtype=np.float64, comments="#")
        except ValueError as e:
            raise PewPewFileError("Could not parse file.") from e

    if data.ndim != 2:
        raise PewPewDataError(f"Invalid data dimensions '{data.ndim}'.")

    isotope = formatIsotope(isotope)

    structured = np.empty(data.shape, dtype=[(isotope, np.float64)])
    structured[isotope] = data
    return LaserData(
        data=structured,
        config=config,
        calibration=calibration,
        name=os.path.splitext(os.path.basename(path))[0],
        source=path,
    )


def save(
    path: str,
    laser: LaserData,
    isotope: str,
    trimmed: bool = False,
    include_header: bool = False,
) -> None:
    header = None
    if include_header:
        config = laser.config
        calibration = laser.calibration
        header = (
            f"Pew Pew {__version__}\nisotope={isotope}\n"
            f"spotsize={config['spotsize']};speed={config['speed']};"
            f"scantime={config['scantime']}\n"
            f"intercept={calibration[isotope]['intercept']};"
            f"gradient={calibration[isotope]['gradient']};"
            f"unit={calibration[isotope]['unit']}\n"
        )
    np.savetxt(
        path,
        laser.get(isotope, calibrated=True, trimmed=trimmed),
        delimiter=",",
        header=header,
    )
