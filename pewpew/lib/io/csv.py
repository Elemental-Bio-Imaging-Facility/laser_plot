import numpy as np
import os.path

from pewpew import __version__

from laserlib import Laser, LaserCalibration, LaserConfig, LaserData
from laserlib.io.error import LaserLibException

from typing import Dict, Tuple


def string_to_dict(s: str, delim: str = ";", kvsep: str = "=") -> Dict[str, str]:
    tokens = s.split(delim)
    return {k: v for k, v in [token.split(kvsep) for token in tokens]}


def load(path: str) -> Laser:
    with open(path, "rb") as fp:
        line = fp.readline().lstrip(b"#").strip()
        if not line.startswith(b"Pew Pew "):  # CSV generated by pewpew
            raise LaserLibException("Missing header!")
        # Version
        version = line[8:]
        if version < b"0.5.2":
            raise LaserLibException(f"Unsupported CSV version '{version}'.")
        # Isotope
        line = fp.readline().lstrip(b"#").strip()
        if b"=" not in line:
            raise LaserLibException(f"Malformed isotope line '{line}'.")
        tokens = line.split(b"=")
        if tokens[0] != b"isotope":
            raise LaserLibException(f"Malformed isotope line '{line}'.")
        isotope = tokens[1].decode()
        # Config
        line = fp.readline().lstrip(b"#").strip()
        try:
            config_dict = string_to_dict(line.decode())
            config = LaserConfig(
                spotsize=float(config_dict["spotsize"]),
                speed=float(config_dict["speed"]),
                scantime=float(config_dict["scantime"]),
            )
        except (KeyError, ValueError):
            raise LaserLibException(f"Malformed config line '{line}'.")
        # Calibration
        try:
            line = fp.readline().lstrip(b"#").strip()
            cal_dict = string_to_dict(line.decode())
            calibration = LaserCalibration(
                intercept=float(cal_dict["intercept"]),
                gradient=float(cal_dict["gradient"]),
                unit=cal_dict["unit"],
            )
        except (KeyError, ValueError):
            raise LaserLibException(f"Malformed calibration line '{line}'")
        # Data
        try:
            cleaned = (line.replace(b";", b",").replace(b"\t", b",") for line in fp)
            data = np.genfromtxt(cleaned, delimiter=b",", comments=b"#", dtype=float)
        except ValueError as e:
            raise LaserLibException("Could not parse file.") from e

        if data.ndim != 2:
            raise LaserLibException(f"Invalid data dimensions '{data.ndim}'.")

    data = {isotope: LaserData(data, calibration)}
    laser = Laser(
        data=data,
        config=config,
        name=os.path.splitext(os.path.basename(path))[0],
        filepath=path,
    )
    return laser


def save(
    path: str,
    laser: Laser,
    isotope: str,
    calibrate: bool = False,
    extent: Tuple[float, float, float, float] = None,
) -> None:
    header = (
        f"Pew Pew {__version__}\nisotope={isotope}\n"
        f"spotsize={laser.config.spotsize};speed={laser.config.speed};"
        f"scantime={laser.config.scantime}\n"
        f"intercept={laser.data[isotope].calibration.intercept};"
        f"gradient={laser.data[isotope].calibration.gradient};"
        f"unit={laser.data[isotope].calibration.unit}\n"
    )
    np.savetxt(
        path,
        laser.get(isotope, calibrate=calibrate, extent=extent),
        fmt="%g",
        delimiter=",",
        comments="#",
        header=header,
    )
